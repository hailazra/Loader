-- AstroHub GUI Library for Roblox
-- Complete rewrite with loadstring compatibility and error fixes

local AstroHub = {}

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

-- Local player reference
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Main window properties
local MainWindow = nil
local MainFrame = nil
local isMinimized = false
local originalSize = nil
local originalPosition = nil

-- Theme system
local themes = {
    Dark = {
        MainBackground = Color3.fromRGB(30, 30, 30),
        MainBackgroundTransparency = 0,
        TitleBar = Color3.fromRGB(40, 40, 40),
        TabContainer = Color3.fromRGB(35, 35, 35),
        TabContent = Color3.fromRGB(25, 25, 25),
        SectionBackground = Color3.fromRGB(40, 40, 40),
        ElementBackground = Color3.fromRGB(50, 50, 50),
        TextColor = Color3.fromRGB(255, 255, 255),
        AccentColor = Color3.fromRGB(0, 162, 255),
        ToggleOn = Color3.fromRGB(0, 200, 0),
        ToggleOff = Color3.fromRGB(100, 100, 100),
        Divider = Color3.fromRGB(60, 60, 60),
        ButtonHover = Color3.fromRGB(70, 70, 70),
        SliderFill = Color3.fromRGB(0, 162, 255),
        InputBackground = Color3.fromRGB(45, 45, 45)
    },
    Light = {
        MainBackground = Color3.fromRGB(245, 245, 245),
        MainBackgroundTransparency = 0,
        TitleBar = Color3.fromRGB(230, 230, 230),
        TabContainer = Color3.fromRGB(240, 240, 240),
        TabContent = Color3.fromRGB(250, 250, 250),
        SectionBackground = Color3.fromRGB(235, 235, 235),
        ElementBackground = Color3.fromRGB(220, 220, 220),
        TextColor = Color3.fromRGB(20, 20, 20),
        AccentColor = Color3.fromRGB(0, 122, 255),
        ToggleOn = Color3.fromRGB(0, 180, 0),
        ToggleOff = Color3.fromRGB(150, 150, 150),
        Divider = Color3.fromRGB(200, 200, 200),
        ButtonHover = Color3.fromRGB(200, 200, 200),
        SliderFill = Color3.fromRGB(0, 122, 255),
        InputBackground = Color3.fromRGB(225, 225, 225)
    },
    Manga = {
        MainBackground = Color3.fromRGB(255, 248, 240),
        MainBackgroundTransparency = 0,
        TitleBar = Color3.fromRGB(255, 182, 193),
        TabContainer = Color3.fromRGB(255, 228, 225),
        TabContent = Color3.fromRGB(255, 240, 245),
        SectionBackground = Color3.fromRGB(255, 218, 185),
        ElementBackground = Color3.fromRGB(255, 192, 203),
        TextColor = Color3.fromRGB(139, 69, 19),
        AccentColor = Color3.fromRGB(255, 105, 180),
        ToggleOn = Color3.fromRGB(255, 20, 147),
        ToggleOff = Color3.fromRGB(255, 182, 193),
        Divider = Color3.fromRGB(255, 160, 122),
        ButtonHover = Color3.fromRGB(255, 160, 122),
        SliderFill = Color3.fromRGB(255, 105, 180),
        InputBackground = Color3.fromRGB(255, 228, 225)
    },
    Space = {
        MainBackground = Color3.fromRGB(15, 15, 25),
        MainBackgroundTransparency = 0,
        TitleBar = Color3.fromRGB(25, 25, 40),
        TabContainer = Color3.fromRGB(20, 20, 35),
        TabContent = Color3.fromRGB(10, 10, 20),
        SectionBackground = Color3.fromRGB(30, 30, 45),
        ElementBackground = Color3.fromRGB(40, 40, 60),
        TextColor = Color3.fromRGB(200, 200, 255),
        AccentColor = Color3.fromRGB(138, 43, 226),
        ToggleOn = Color3.fromRGB(0, 255, 127),
        ToggleOff = Color3.fromRGB(75, 75, 100),
        Divider = Color3.fromRGB(60, 60, 80),
        ButtonHover = Color3.fromRGB(60, 60, 80),
        SliderFill = Color3.fromRGB(138, 43, 226),
        InputBackground = Color3.fromRGB(35, 35, 50)
    }
}

local currentTheme = themes.Dark

-- Tab management
local Tabs = {}
local TabContainer = nil
local TabContentContainer = nil
local activeTab = nil

-- Notification system
local notificationQueue = {}
local maxNotifications = 5

-- Flag system
local flags = {}

-- Callback system
local callbacks = {}

-- Hotkey system
local currentHotkey = nil
local hotkeyConnection = nil

-- Blur effect
local blurEffect = nil

-- Minimize icon
local minimizeIcon = nil

-- Utility functions
local function createUICorner(parent, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or 8)
    corner.Parent = parent
    return corner
end

local function createUIStroke(parent, thickness, color)
    local stroke = Instance.new("UIStroke")
    stroke.Thickness = thickness or 1
    stroke.Color = color or currentTheme.Divider
    stroke.Parent = parent
    return stroke
end

local function createUIListLayout(parent, direction, alignment, padding)
    local layout = Instance.new("UIListLayout")
    layout.FillDirection = direction or Enum.FillDirection.Vertical
    layout.HorizontalAlignment = alignment or Enum.HorizontalAlignment.Center
    layout.VerticalAlignment = Enum.VerticalAlignment.Top
    layout.Padding = UDim.new(0, padding or 5)
    layout.Parent = parent
    return layout
end

local function createUIPadding(parent, all)
    local padding = Instance.new("UIPadding")
    padding.PaddingTop = UDim.new(0, all or 10)
    padding.PaddingBottom = UDim.new(0, all or 10)
    padding.PaddingLeft = UDim.new(0, all or 10)
    padding.PaddingRight = UDim.new(0, all or 10)
    padding.Parent = parent
    return padding
end

-- Theme functions
function AstroHub:SetTheme(themeName)
    if themes[themeName] then
        currentTheme = themes[themeName]
        if MainWindow then
            self:RefreshTheme()
        end
    else
        warn("AstroHub: Theme '" .. themeName .. "' not found.")
    end
end

function AstroHub:RefreshTheme()
    if not MainWindow then return end
    
    -- Update main frame
    if MainFrame then
        MainFrame.BackgroundColor3 = currentTheme.MainBackground
    end
    
    -- Update title bar
    local titleBar = MainFrame:FindFirstChild("TitleBar")
    if titleBar then
        titleBar.BackgroundColor3 = currentTheme.TitleBar
        local titleLabel = titleBar:FindFirstChild("TitleLabel")
        if titleLabel then
            titleLabel.TextColor3 = currentTheme.TextColor
        end
    end
    
    -- Update tab container
    if TabContainer then
        TabContainer.BackgroundColor3 = currentTheme.TabContainer
    end
    
    -- Update tab content
    if TabContentContainer then
        TabContentContainer.BackgroundColor3 = currentTheme.TabContent
    end
    
    -- Update all tabs
    for _, tab in pairs(Tabs) do
        if tab.Button then
            tab.Button.TextColor3 = currentTheme.TextColor
            if tab.Button.BackgroundTransparency ~= 1 then
                tab.Button.BackgroundColor3 = currentTheme.ElementBackground
            end
        end
    end
end

-- Window creation
function AstroHub:CreateWindow(title, sizeX, sizeY, posX, posY, logoAssetId)
    if MainWindow then
        warn("AstroHub: Window already created. Destroy it first to create a new one.")
        return MainFrame
    end

    MainWindow = Instance.new("ScreenGui")
    MainWindow.Name = "AstroHub_MainWindow"
    MainWindow.DisplayOrder = 999
    MainWindow.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    MainWindow.Parent = PlayerGui

    MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, sizeX or 500, 0, sizeY or 350)
    MainFrame.Position = UDim2.new(0, posX or 100, 0, posY or 100)
    MainFrame.BackgroundColor3 = currentTheme.MainBackground
    MainFrame.BorderSizePixel = 0
    MainFrame.Parent = MainWindow

    createUICorner(MainFrame, 8)
    createUIStroke(MainFrame, 1, currentTheme.Divider)

    -- Store original size and position
    originalSize = MainFrame.Size
    originalPosition = MainFrame.Position

    -- Title Bar
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Size = UDim2.new(1, 0, 0, 30)
    titleBar.Position = UDim2.new(0, 0, 0, 0)
    titleBar.BackgroundColor3 = currentTheme.TitleBar
    titleBar.BorderSizePixel = 0
    titleBar.Parent = MainFrame

    createUICorner(titleBar, 8)

    -- Title Label
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "TitleLabel"
    titleLabel.Size = UDim2.new(1, -90, 1, 0)
    titleLabel.Position = UDim2.new(0, 10, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title or "AstroHub"
    titleLabel.TextColor3 = currentTheme.TextColor
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.TextSize = 16
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = titleBar

    -- Logo (if provided)
    if logoAssetId then
        local logoImage = Instance.new("ImageLabel")
        logoImage.Name = "LogoImage"
        logoImage.Size = UDim2.new(0, 20, 0, 20)
        logoImage.Position = UDim2.new(0, 5, 0, 5)
        logoImage.BackgroundTransparency = 1
        logoImage.Image = logoAssetId
        logoImage.Parent = titleBar

        titleLabel.Position = UDim2.new(0, 30, 0, 0)
        titleLabel.Size = UDim2.new(1, -120, 1, 0)
    end

    -- Minimize Button
    local minimizeButton = Instance.new("TextButton")
    minimizeButton.Name = "MinimizeButton"
    minimizeButton.Size = UDim2.new(0, 30, 1, 0)
    minimizeButton.Position = UDim2.new(1, -60, 0, 0)
    minimizeButton.BackgroundColor3 = currentTheme.AccentColor
    minimizeButton.Text = "â€”"
    minimizeButton.TextColor3 = currentTheme.TextColor
    minimizeButton.Font = Enum.Font.SourceSansBold
    minimizeButton.TextSize = 16
    minimizeButton.BorderSizePixel = 0
    minimizeButton.Parent = titleBar

    createUICorner(minimizeButton, 4)

    minimizeButton.MouseButton1Click:Connect(function()
        self:MinimizeGUI()
    end)

    -- Close Button
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 30, 1, 0)
    closeButton.Position = UDim2.new(1, -30, 0, 0)
    closeButton.BackgroundColor3 = Color3.fromRGB(255, 69, 58)
    closeButton.Text = "Ã—"
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.Font = Enum.Font.SourceSansBold
    closeButton.TextSize = 18
    closeButton.BorderSizePixel = 0
    closeButton.Parent = titleBar

    createUICorner(closeButton, 4)

    closeButton.MouseButton1Click:Connect(function()
        self:DestroyGUI()
    end)

    -- Draggable functionality
    local dragging = false
    local dragStart = nil
    local startPos = nil

    local function updateDrag(input)
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
        end
    end)

    titleBar.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateDrag(input)
        end
    end)

    titleBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    -- Resize handle
    local resizeHandle = Instance.new("TextButton")
    resizeHandle.Name = "ResizeHandle"
    resizeHandle.Size = UDim2.new(0, 15, 0, 15)
    resizeHandle.Position = UDim2.new(1, -15, 1, -15)
    resizeHandle.BackgroundColor3 = currentTheme.AccentColor
    resizeHandle.Text = ""
    resizeHandle.BorderSizePixel = 0
    resizeHandle.Parent = MainFrame

    createUICorner(resizeHandle, 3)

    local resizing = false
    local resizeStart = nil
    local startSize = nil

    local function updateResize(input)
        local delta = input.Position - resizeStart
        local newSize = UDim2.new(0, math.max(300, startSize.X.Offset + delta.X), 0, math.max(200, startSize.Y.Offset + delta.Y))
        MainFrame.Size = newSize
    end

    resizeHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            resizing = true
            resizeStart = input.Position
            startSize = MainFrame.Size
        end
    end)

    resizeHandle.InputChanged:Connect(function(input)
        if resizing and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateResize(input)
        end
    end)

    resizeHandle.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            resizing = false
        end
    end)

    -- Fade in animation
    MainFrame.BackgroundTransparency = 1
    titleBar.BackgroundTransparency = 1
    titleLabel.TextTransparency = 1
    minimizeButton.BackgroundTransparency = 1
    minimizeButton.TextTransparency = 1
    closeButton.BackgroundTransparency = 1
    closeButton.TextTransparency = 1

    local fadeInInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    
    TweenService:Create(MainFrame, fadeInInfo, {BackgroundTransparency = 0}):Play()
    TweenService:Create(titleBar, fadeInInfo, {BackgroundTransparency = 0}):Play()
    TweenService:Create(titleLabel, fadeInInfo, {TextTransparency = 0}):Play()
    TweenService:Create(minimizeButton, fadeInInfo, {BackgroundTransparency = 0, TextTransparency = 0}):Play()
    TweenService:Create(closeButton, fadeInInfo, {BackgroundTransparency = 0, TextTransparency = 0}):Play()

    return MainFrame
end

-- Tab creation
function AstroHub:CreateTab(tabName)
    if not MainWindow then
        warn("AstroHub: CreateTab requires a window to be created first.")
        return nil
    end

    if not TabContainer then
        -- Create tab container
        TabContainer = Instance.new("ScrollingFrame")
        TabContainer.Name = "TabContainer"
        TabContainer.Size = UDim2.new(0, 150, 1, -40)
        TabContainer.Position = UDim2.new(0, 0, 0, 35)
        TabContainer.BackgroundColor3 = currentTheme.TabContainer
        TabContainer.BorderSizePixel = 0
        TabContainer.ScrollBarThickness = 6
        TabContainer.ScrollBarImageColor3 = currentTheme.Divider
        TabContainer.CanvasSize = UDim2.new(0, 0, 0, 0)
        TabContainer.Parent = MainFrame

        createUICorner(TabContainer, 6)
        createUIListLayout(TabContainer, Enum.FillDirection.Vertical, Enum.HorizontalAlignment.Center, 5)
        createUIPadding(TabContainer, 5)

        -- Create tab content container
        TabContentContainer = Instance.new("ScrollingFrame")
        TabContentContainer.Name = "TabContentContainer"
        TabContentContainer.Size = UDim2.new(1, -160, 1, -40)
        TabContentContainer.Position = UDim2.new(0, 160, 0, 35)
        TabContentContainer.BackgroundColor3 = currentTheme.TabContent
        TabContentContainer.BorderSizePixel = 0
        TabContentContainer.ScrollBarThickness = 6
        TabContentContainer.ScrollBarImageColor3 = currentTheme.Divider
        TabContentContainer.CanvasSize = UDim2.new(0, 0, 0, 0)
        TabContentContainer.Parent = MainFrame

        createUICorner(TabContentContainer, 6)
        createUIListLayout(TabContentContainer, Enum.FillDirection.Vertical, Enum.HorizontalAlignment.Center, 10)
        createUIPadding(TabContentContainer, 10)
    end

    -- Create tab button
    local tabButton = Instance.new("TextButton")
    tabButton.Name = tabName .. "_TabButton"
    tabButton.Size = UDim2.new(1, -10, 0, 35)
    tabButton.BackgroundColor3 = currentTheme.ElementBackground
    tabButton.Text = tabName
    tabButton.TextColor3 = currentTheme.TextColor
    tabButton.Font = Enum.Font.SourceSans
    tabButton.TextSize = 14
    tabButton.BorderSizePixel = 0
    tabButton.Parent = TabContainer

    createUICorner(tabButton, 6)

    -- Create tab content frame
    local tabContent = Instance.new("Frame")
    tabContent.Name = tabName .. "_TabContent"
    tabContent.Size = UDim2.new(1, 0, 0, 0)
    tabContent.AutomaticSize = Enum.AutomaticSize.Y
    tabContent.BackgroundTransparency = 1
    tabContent.BorderSizePixel = 0
    tabContent.Parent = TabContentContainer
    tabContent.Visible = false

    createUIListLayout(tabContent, Enum.FillDirection.Vertical, Enum.HorizontalAlignment.Center, 5)

    -- Tab button click event
    tabButton.MouseButton1Click:Connect(function()
        -- Hide all tabs
        for _, tab in pairs(Tabs) do
            if tab.Content then
                tab.Content.Visible = false
            end
            if tab.Button then
                tab.Button.BackgroundColor3 = currentTheme.ElementBackground
            end
        end
        
        -- Show selected tab
        tabContent.Visible = true
        tabButton.BackgroundColor3 = currentTheme.AccentColor
        activeTab = tabName
    end)

    -- Store tab data
    Tabs[tabName] = {
        Button = tabButton,
        Content = tabContent
    }

    -- Auto-select first tab
    if activeTab == nil then
        tabButton.MouseButton1Click:Fire()
    end

    return tabContent
end

-- Section creation
function AstroHub:CreateSection(parentTabContent, sectionName)
    if not parentTabContent or not parentTabContent:IsA("Frame") then
        warn("AstroHub: CreateSection requires a valid parent tab content frame.")
        return nil
    end

    local sectionFrame = Instance.new("Frame")
    sectionFrame.Name = sectionName .. "_Section"
    sectionFrame.Size = UDim2.new(1, -20, 0, 0)
    sectionFrame.AutomaticSize = Enum.AutomaticSize.Y
    sectionFrame.BackgroundColor3 = currentTheme.SectionBackground
    sectionFrame.BorderSizePixel = 0
    sectionFrame.Parent = parentTabContent

    createUICorner(sectionFrame, 8)
    createUIStroke(sectionFrame, 1, currentTheme.Divider)
    createUIPadding(sectionFrame, 10)

    -- Section title
    local sectionTitle = Instance.new("TextLabel")
    sectionTitle.Name = "SectionTitle"
    sectionTitle.Size = UDim2.new(1, 0, 0, 25)
    sectionTitle.BackgroundTransparency = 1
    sectionTitle.Text = sectionName
    sectionTitle.TextColor3 = currentTheme.TextColor
    sectionTitle.Font = Enum.Font.SourceSansBold
    sectionTitle.TextSize = 16
    sectionTitle.TextXAlignment = Enum.TextXAlignment.Left
    sectionTitle.Parent = sectionFrame

    -- Section content container
    local sectionContent = Instance.new("Frame")
    sectionContent.Name = "SectionContent"
    sectionContent.Size = UDim2.new(1, 0, 0, 0)
    sectionContent.AutomaticSize = Enum.AutomaticSize.Y
    sectionContent.BackgroundTransparency = 1
    sectionContent.BorderSizePixel = 0
    sectionContent.Parent = sectionFrame

    createUIListLayout(sectionContent, Enum.FillDirection.Vertical, Enum.HorizontalAlignment.Center, 5)

    return sectionContent
end

-- Button creation
function AstroHub:CreateButton(parentSection, text, callback)
    if not parentSection or not parentSection:IsA("Frame") then
        warn("AstroHub: CreateButton requires a valid parent section frame.")
        return nil
    end

    local button = Instance.new("TextButton")
    button.Name = text .. "_Button"
    button.Size = UDim2.new(1, -10, 0, 35)
    button.BackgroundColor3 = currentTheme.ElementBackground
    button.Text = text
    button.TextColor3 = currentTheme.TextColor
    button.Font = Enum.Font.SourceSans
    button.TextSize = 14
    button.BorderSizePixel = 0
    button.Parent = parentSection

    createUICorner(button, 6)

    -- Hover effects
    button.MouseEnter:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = currentTheme.ButtonHover}):Play()
    end)

    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = currentTheme.ElementBackground}):Play()
    end)

    -- Click event
    if callback then
        button.MouseButton1Click:Connect(callback)
    end

    return button
end

-- Toggle creation
function AstroHub:CreateToggle(parentSection, text, defaultValue, callback)
    if not parentSection or not parentSection:IsA("Frame") then
        warn("AstroHub: CreateToggle requires a valid parent section frame.")
        return nil
    end

    local toggleFrame = Instance.new("Frame")
    toggleFrame.Name = text .. "_Toggle"
    toggleFrame.Size = UDim2.new(1, -10, 0, 35)
    toggleFrame.BackgroundColor3 = currentTheme.ElementBackground
    toggleFrame.BorderSizePixel = 0
    toggleFrame.Parent = parentSection

    createUICorner(toggleFrame, 6)
    createUIPadding(toggleFrame, 8)

    -- Toggle label
    local toggleLabel = Instance.new("TextLabel")
    toggleLabel.Name = "ToggleLabel"
    toggleLabel.Size = UDim2.new(1, -60, 1, 0)
    toggleLabel.Position = UDim2.new(0, 0, 0, 0)
    toggleLabel.BackgroundTransparency = 1
    toggleLabel.Text = text
    toggleLabel.TextColor3 = currentTheme.TextColor
    toggleLabel.Font = Enum.Font.SourceSans
    toggleLabel.TextSize = 14
    toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
    toggleLabel.Parent = toggleFrame

    -- Toggle button
    local toggleButton = Instance.new("TextButton")
    toggleButton.Name = "ToggleButton"
    toggleButton.Size = UDim2.new(0, 50, 0, 20)
    toggleButton.Position = UDim2.new(1, -50, 0.5, -10)
    toggleButton.BackgroundColor3 = defaultValue and currentTheme.ToggleOn or currentTheme.ToggleOff
    toggleButton.Text = ""
    toggleButton.BorderSizePixel = 0
    toggleButton.Parent = toggleFrame

    createUICorner(toggleButton, 10)

    -- Toggle indicator
    local toggleIndicator = Instance.new("Frame")
    toggleIndicator.Name = "ToggleIndicator"
    toggleIndicator.Size = UDim2.new(0, 16, 0, 16)
    toggleIndicator.Position = defaultValue and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
    toggleIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    toggleIndicator.BorderSizePixel = 0
    toggleIndicator.Parent = toggleButton

    createUICorner(toggleIndicator, 8)

    local currentValue = defaultValue or false

    -- Toggle function
    local function toggle()
        currentValue = not currentValue
        
        local newColor = currentValue and currentTheme.ToggleOn or currentTheme.ToggleOff
        local newPosition = currentValue and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
        
        TweenService:Create(toggleButton, TweenInfo.new(0.2), {BackgroundColor3 = newColor}):Play()
        TweenService:Create(toggleIndicator, TweenInfo.new(0.2), {Position = newPosition}):Play()
        
        if callback then
            callback(currentValue)
        end
    end

    toggleButton.MouseButton1Click:Connect(toggle)

    -- Return object with methods
    return {
        Set = function(self, value)
            if value ~= currentValue then
                toggle()
            end
        end,
        Get = function(self)
            return currentValue
        end
    }
end

-- Slider creation
function AstroHub:CreateSlider(parentSection, text, minValue, maxValue, defaultValue, callback)
    if not parentSection or not parentSection:IsA("Frame") then
        warn("AstroHub: CreateSlider requires a valid parent section frame.")
        return nil
    end

    local sliderFrame = Instance.new("Frame")
    sliderFrame.Name = text .. "_Slider"
    sliderFrame.Size = UDim2.new(1, -10, 0, 50)
    sliderFrame.BackgroundColor3 = currentTheme.ElementBackground
    sliderFrame.BorderSizePixel = 0
    sliderFrame.Parent = parentSection

    createUICorner(sliderFrame, 6)
    createUIPadding(sliderFrame, 8)

    -- Slider label
    local sliderLabel = Instance.new("TextLabel")
    sliderLabel.Name = "SliderLabel"
    sliderLabel.Size = UDim2.new(1, -60, 0, 20)
    sliderLabel.Position = UDim2.new(0, 0, 0, 0)
    sliderLabel.BackgroundTransparency = 1
    sliderLabel.Text = text
    sliderLabel.TextColor3 = currentTheme.TextColor
    sliderLabel.Font = Enum.Font.SourceSans
    sliderLabel.TextSize = 14
    sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
    sliderLabel.Parent = sliderFrame

    -- Value label
    local valueLabel = Instance.new("TextLabel")
    valueLabel.Name = "ValueLabel"
    valueLabel.Size = UDim2.new(0, 60, 0, 20)
    valueLabel.Position = UDim2.new(1, -60, 0, 0)
    valueLabel.BackgroundTransparency = 1
    valueLabel.Text = tostring(defaultValue or minValue)
    valueLabel.TextColor3 = currentTheme.TextColor
    valueLabel.Font = Enum.Font.SourceSans
    valueLabel.TextSize = 14
    valueLabel.TextXAlignment = Enum.TextXAlignment.Right
    valueLabel.Parent = sliderFrame

    -- Slider track
    local sliderTrack = Instance.new("Frame")
    sliderTrack.Name = "SliderTrack"
    sliderTrack.Size = UDim2.new(1, 0, 0, 6)
    sliderTrack.Position = UDim2.new(0, 0, 1, -12)
    sliderTrack.BackgroundColor3 = currentTheme.ToggleOff
    sliderTrack.BorderSizePixel = 0
    sliderTrack.Parent = sliderFrame

    createUICorner(sliderTrack, 3)

    -- Slider fill
    local sliderFill = Instance.new("Frame")
    sliderFill.Name = "SliderFill"
    sliderFill.Size = UDim2.new(0, 0, 1, 0)
    sliderFill.Position = UDim2.new(0, 0, 0, 0)
    sliderFill.BackgroundColor3 = currentTheme.SliderFill
    sliderFill.BorderSizePixel = 0
    sliderFill.Parent = sliderTrack

    createUICorner(sliderFill, 3)

    -- Slider handle
    local sliderHandle = Instance.new("TextButton")
    sliderHandle.Name = "SliderHandle"
    sliderHandle.Size = UDim2.new(0, 16, 0, 16)
    sliderHandle.Position = UDim2.new(0, -8, 0.5, -8)
    sliderHandle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    sliderHandle.Text = ""
    sliderHandle.BorderSizePixel = 0
    sliderHandle.Parent = sliderTrack

    createUICorner(sliderHandle, 8)

    local currentValue = defaultValue or minValue
    local dragging = false

    -- Update slider function
    local function updateSlider(input)
        local trackPosition = sliderTrack.AbsolutePosition.X
        local trackSize = sliderTrack.AbsoluteSize.X
        local mouseX = input.Position.X
        
        local relativeX = math.clamp(mouseX - trackPosition, 0, trackSize)
        local percentage = relativeX / trackSize
        
        currentValue = math.floor(minValue + (maxValue - minValue) * percentage)
        
        valueLabel.Text = tostring(currentValue)
        sliderFill.Size = UDim2.new(percentage, 0, 1, 0)
        sliderHandle.Position = UDim2.new(percentage, -8, 0.5, -8)
        
        if callback then
            callback(currentValue)
        end
    end

    -- Initial setup
    local initialPercentage = (currentValue - minValue) / (maxValue - minValue)
    sliderFill.Size = UDim2.new(initialPercentage, 0, 1, 0)
    sliderHandle.Position = UDim2.new(initialPercentage, -8, 0.5, -8)

    -- Handle input
    sliderHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            updateSlider(input)
        end
    end)

    sliderHandle.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateSlider(input)
        end
    end)

    sliderHandle.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    -- Track click
    sliderTrack.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            updateSlider(input)
        end
    end)

    -- Return object with methods
    return {
        Set = function(self, value)
            currentValue = math.clamp(value, minValue, maxValue)
            valueLabel.Text = tostring(currentValue)
            local percentage = (currentValue - minValue) / (maxValue - minValue)
            sliderFill.Size = UDim2.new(percentage, 0, 1, 0)
            sliderHandle.Position = UDim2.new(percentage, -8, 0.5, -8)
        end,
        Get = function(self)
            return currentValue
        end
    }
end

-- Dropdown creation
function AstroHub:CreateDropdown(parentSection, text, options, callback)
    if not parentSection or not parentSection:IsA("Frame") then
        warn("AstroHub: CreateDropdown requires a valid parent section frame.")
        return nil
    end

    local dropdownFrame = Instance.new("Frame")
    dropdownFrame.Name = text .. "_Dropdown"
    dropdownFrame.Size = UDim2.new(1, -10, 0, 35)
    dropdownFrame.BackgroundColor3 = currentTheme.ElementBackground
    dropdownFrame.BorderSizePixel = 0
    dropdownFrame.Parent = parentSection

    createUICorner(dropdownFrame, 6)
    createUIPadding(dropdownFrame, 8)

    -- Dropdown button
    local dropdownButton = Instance.new("TextButton")
    dropdownButton.Name = "DropdownButton"
    dropdownButton.Size = UDim2.new(1, 0, 1, 0)
    dropdownButton.Position = UDim2.new(0, 0, 0, 0)
    dropdownButton.BackgroundTransparency = 1
    dropdownButton.Text = text .. ": " .. (options[1] or "None")
    dropdownButton.TextColor3 = currentTheme.TextColor
    dropdownButton.Font = Enum.Font.SourceSans
    dropdownButton.TextSize = 14
    dropdownButton.TextXAlignment = Enum.TextXAlignment.Left
    dropdownButton.Parent = dropdownFrame

    -- Dropdown arrow
    local dropdownArrow = Instance.new("TextLabel")
    dropdownArrow.Name = "DropdownArrow"
    dropdownArrow.Size = UDim2.new(0, 20, 1, 0)
    dropdownArrow.Position = UDim2.new(1, -20, 0, 0)
    dropdownArrow.BackgroundTransparency = 1
    dropdownArrow.Text = "â–¼"
    dropdownArrow.TextColor3 = currentTheme.TextColor
    dropdownArrow.Font = Enum.Font.SourceSans
    dropdownArrow.TextSize = 12
    dropdownArrow.TextXAlignment = Enum.TextXAlignment.Center
    dropdownArrow.Parent = dropdownFrame

    -- Dropdown list
    local dropdownList = Instance.new("ScrollingFrame")
    dropdownList.Name = "DropdownList"
    dropdownList.Size = UDim2.new(1, 0, 0, math.min(#options * 30, 150))
    dropdownList.Position = UDim2.new(0, 0, 1, 5)
    dropdownList.BackgroundColor3 = currentTheme.ElementBackground
    dropdownList.BorderSizePixel = 0
    dropdownList.ScrollBarThickness = 6
    dropdownList.ScrollBarImageColor3 = currentTheme.Divider
    dropdownList.CanvasSize = UDim2.new(0, 0, 0, #options * 30)
    dropdownList.Visible = false
    dropdownList.Parent = dropdownFrame

    createUICorner(dropdownList, 6)
    createUIListLayout(dropdownList, Enum.FillDirection.Vertical, Enum.HorizontalAlignment.Center, 2)

    local currentValue = options[1] or ""
    local isOpen = false

    -- Create option buttons
    for _, option in ipairs(options) do
        local optionButton = Instance.new("TextButton")
        optionButton.Name = option .. "_Option"
        optionButton.Size = UDim2.new(1, -10, 0, 25)
        optionButton.BackgroundColor3 = currentTheme.SectionBackground
        optionButton.Text = option
        optionButton.TextColor3 = currentTheme.TextColor
        optionButton.Font = Enum.Font.SourceSans
        optionButton.TextSize = 14
        optionButton.BorderSizePixel = 0
        optionButton.Parent = dropdownList

        createUICorner(optionButton, 4)

        optionButton.MouseButton1Click:Connect(function()
            currentValue = option
            dropdownButton.Text = text .. ": " .. option
            dropdownList.Visible = false
            dropdownArrow.Text = "â–¼"
            isOpen = false
            
            if callback then
                callback(option)
            end
        end)
    end

    -- Toggle dropdown
    dropdownButton.MouseButton1Click:Connect(function()
        isOpen = not isOpen
        dropdownList.Visible = isOpen
        dropdownArrow.Text = isOpen and "â–²" or "â–¼"
    end)

    -- Return object with methods
    return {
        Set = function(self, value)
            if table.find(options, value) then
                currentValue = value
                dropdownButton.Text = text .. ": " .. value
            end
        end,
        Get = function(self)
            return currentValue
        end
    }
end

-- Input creation
function AstroHub:CreateInput(parentSection, text, defaultValue, callback)
    if not parentSection or not parentSection:IsA("Frame") then
        warn("AstroHub: CreateInput requires a valid parent section frame.")
        return nil
    end

    local inputFrame = Instance.new("Frame")
    inputFrame.Name = text .. "_Input"
    inputFrame.Size = UDim2.new(1, -10, 0, 50)
    inputFrame.BackgroundColor3 = currentTheme.ElementBackground
    inputFrame.BorderSizePixel = 0
    inputFrame.Parent = parentSection

    createUICorner(inputFrame, 6)
    createUIPadding(inputFrame, 8)

    -- Input label
    local inputLabel = Instance.new("TextLabel")
    inputLabel.Name = "InputLabel"
    inputLabel.Size = UDim2.new(1, 0, 0, 20)
    inputLabel.Position = UDim2.new(0, 0, 0, 0)
    inputLabel.BackgroundTransparency = 1
    inputLabel.Text = text
    inputLabel.TextColor3 = currentTheme.TextColor
    inputLabel.Font = Enum.Font.SourceSans
    inputLabel.TextSize = 14
    inputLabel.TextXAlignment = Enum.TextXAlignment.Left
    inputLabel.Parent = inputFrame

    -- Input box
    local inputBox = Instance.new("TextBox")
    inputBox.Name = "InputBox"
    inputBox.Size = UDim2.new(1, 0, 0, 20)
    inputBox.Position = UDim2.new(0, 0, 1, -20)
    inputBox.BackgroundColor3 = currentTheme.InputBackground
    inputBox.Text = defaultValue or ""
    inputBox.TextColor3 = currentTheme.TextColor
    inputBox.Font = Enum.Font.SourceSans
    inputBox.TextSize = 14
    inputBox.TextXAlignment = Enum.TextXAlignment.Left
    inputBox.PlaceholderText = "Enter " .. text:lower() .. "..."
    inputBox.PlaceholderColor3 = Color3.fromRGB(150, 150, 150)
    inputBox.BorderSizePixel = 0
    inputBox.Parent = inputFrame

    createUICorner(inputBox, 4)

    -- Input event
    if callback then
        inputBox.FocusLost:Connect(function()
            callback(inputBox.Text)
        end)
    end

    -- Return object with methods
    return {
        Set = function(self, value)
            inputBox.Text = value
        end,
        Get = function(self)
            return inputBox.Text
        end
    }
end

-- Label creation
function AstroHub:CreateLabel(parentSection, text, textSize, textColor)
    if not parentSection or not parentSection:IsA("Frame") then
        warn("AstroHub: CreateLabel requires a valid parent section frame.")
        return nil
    end

    local label = Instance.new("TextLabel")
    label.Name = text .. "_Label"
    label.Size = UDim2.new(1, -10, 0, textSize or 16)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = textColor or currentTheme.TextColor
    label.Font = Enum.Font.SourceSans
    label.TextSize = textSize or 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.TextWrapped = true
    label.Parent = parentSection

    return label
end

-- Divider creation
function AstroHub:CreateDivider(parentSection)
    if not parentSection or not parentSection:IsA("Frame") then
        warn("AstroHub: CreateDivider requires a valid parent section frame.")
        return nil
    end

    local divider = Instance.new("Frame")
    divider.Name = "Divider"
    divider.Size = UDim2.new(1, -10, 0, 2)
    divider.BackgroundColor3 = currentTheme.Divider
    divider.BorderSizePixel = 0
    divider.Parent = parentSection

    return divider
end

-- Progress bar creation
function AstroHub:CreateProgressBar(parentSection, text, initialPercentage)
    if not parentSection or not parentSection:IsA("Frame") then
        warn("AstroHub: CreateProgressBar requires a valid parent section frame.")
        return nil
    end

    local progressFrame = Instance.new("Frame")
    progressFrame.Name = text .. "_Progress"
    progressFrame.Size = UDim2.new(1, -10, 0, 40)
    progressFrame.BackgroundColor3 = currentTheme.ElementBackground
    progressFrame.BorderSizePixel = 0
    progressFrame.Parent = parentSection

    createUICorner(progressFrame, 6)
    createUIPadding(progressFrame, 8)

    -- Progress label
    local progressLabel = Instance.new("TextLabel")
    progressLabel.Name = "ProgressLabel"
    progressLabel.Size = UDim2.new(1, -40, 0, 15)
    progressLabel.Position = UDim2.new(0, 0, 0, 0)
    progressLabel.BackgroundTransparency = 1
    progressLabel.Text = text
    progressLabel.TextColor3 = currentTheme.TextColor
    progressLabel.Font = Enum.Font.SourceSans
    progressLabel.TextSize = 14
    progressLabel.TextXAlignment = Enum.TextXAlignment.Left
    progressLabel.Parent = progressFrame

    -- Progress percentage
    local progressPercentage = Instance.new("TextLabel")
    progressPercentage.Name = "ProgressPercentage"
    progressPercentage.Size = UDim2.new(0, 40, 0, 15)
    progressPercentage.Position = UDim2.new(1, -40, 0, 0)
    progressPercentage.BackgroundTransparency = 1
    progressPercentage.Text = (initialPercentage or 0) .. "%"
    progressPercentage.TextColor3 = currentTheme.TextColor
    progressPercentage.Font = Enum.Font.SourceSans
    progressPercentage.TextSize = 14
    progressPercentage.TextXAlignment = Enum.TextXAlignment.Right
    progressPercentage.Parent = progressFrame

    -- Progress bar track
    local progressTrack = Instance.new("Frame")
    progressTrack.Name = "ProgressTrack"
    progressTrack.Size = UDim2.new(1, 0, 0, 6)
    progressTrack.Position = UDim2.new(0, 0, 1, -10)
    progressTrack.BackgroundColor3 = currentTheme.ToggleOff
    progressTrack.BorderSizePixel = 0
    progressTrack.Parent = progressFrame

    createUICorner(progressTrack, 3)

    -- Progress bar fill
    local progressFill = Instance.new("Frame")
    progressFill.Name = "ProgressFill"
    progressFill.Size = UDim2.new((initialPercentage or 0) / 100, 0, 1, 0)
    progressFill.Position = UDim2.new(0, 0, 0, 0)
    progressFill.BackgroundColor3 = currentTheme.SliderFill
    progressFill.BorderSizePixel = 0
    progressFill.Parent = progressTrack

    createUICorner(progressFill, 3)

    -- Return object with methods
    return {
        Set = function(self, percentage)
            percentage = math.clamp(percentage, 0, 100)
            progressPercentage.Text = percentage .. "%"
            TweenService:Create(progressFill, TweenInfo.new(0.3), {Size = UDim2.new(percentage / 100, 0, 1, 0)}):Play()
        end,
        Get = function(self)
            return tonumber(progressPercentage.Text:gsub("%%", ""))
        end
    }
end

-- Player list dropdown
function AstroHub:CreatePlayerListDropdown(parentSection, text, callback)
    if not parentSection or not parentSection:IsA("Frame") then
        warn("AstroHub: CreatePlayerListDropdown requires a valid parent section frame.")
        return nil
    end

    local function getPlayerNames()
        local playerNames = {}
        for _, player in ipairs(Players:GetPlayers()) do
            table.insert(playerNames, player.Name)
        end
        return playerNames
    end

    local playerDropdown = self:CreateDropdown(parentSection, text, getPlayerNames(), callback)

    -- Update player list when players join/leave
    local function updatePlayerList()
        -- This would need to be implemented to update the dropdown options
        -- For now, we'll just create a new dropdown
    end

    Players.PlayerAdded:Connect(updatePlayerList)
    Players.PlayerRemoving:Connect(updatePlayerList)

    return playerDropdown
end

-- Notification system
function AstroHub:CreateNotification(title, message, duration)
    duration = duration or 3

    local notification = Instance.new("Frame")
    notification.Name = "Notification"
    notification.Size = UDim2.new(0, 300, 0, 80)
    notification.Position = UDim2.new(1, -320, 0, 20 + (#notificationQueue * 90))
    notification.BackgroundColor3 = currentTheme.ElementBackground
    notification.BorderSizePixel = 0
    notification.Parent = PlayerGui

    createUICorner(notification, 8)
    createUIStroke(notification, 2, currentTheme.AccentColor)
    createUIPadding(notification, 10)

    -- Notification title
    local notificationTitle = Instance.new("TextLabel")
    notificationTitle.Name = "NotificationTitle"
    notificationTitle.Size = UDim2.new(1, -30, 0, 20)
    notificationTitle.Position = UDim2.new(0, 0, 0, 0)
    notificationTitle.BackgroundTransparency = 1
    notificationTitle.Text = title
    notificationTitle.TextColor3 = currentTheme.TextColor
    notificationTitle.Font = Enum.Font.SourceSansBold
    notificationTitle.TextSize = 16
    notificationTitle.TextXAlignment = Enum.TextXAlignment.Left
    notificationTitle.Parent = notification

    -- Notification message
    local notificationMessage = Instance.new("TextLabel")
    notificationMessage.Name = "NotificationMessage"
    notificationMessage.Size = UDim2.new(1, -30, 0, 30)
    notificationMessage.Position = UDim2.new(0, 0, 0, 25)
    notificationMessage.BackgroundTransparency = 1
    notificationMessage.Text = message
    notificationMessage.TextColor3 = currentTheme.TextColor
    notificationMessage.Font = Enum.Font.SourceSans
    notificationMessage.TextSize = 14
    notificationMessage.TextXAlignment = Enum.TextXAlignment.Left
    notificationMessage.TextWrapped = true
    notificationMessage.Parent = notification

    -- Close button
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 20, 0, 20)
    closeButton.Position = UDim2.new(1, -20, 0, 0)
    closeButton.BackgroundColor3 = Color3.fromRGB(255, 69, 58)
    closeButton.Text = "Ã—"
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.Font = Enum.Font.SourceSansBold
    closeButton.TextSize = 14
    closeButton.BorderSizePixel = 0
    closeButton.Parent = notification

    createUICorner(closeButton, 10)

    -- Slide in animation
    notification.Position = UDim2.new(1, 0, 0, 20 + (#notificationQueue * 90))
    TweenService:Create(notification, TweenInfo.new(0.3), {Position = UDim2.new(1, -320, 0, 20 + (#notificationQueue * 90))}):Play()

    -- Add to queue
    table.insert(notificationQueue, notification)

    -- Remove function
    local function removeNotification()
        for i, notif in ipairs(notificationQueue) do
            if notif == notification then
                table.remove(notificationQueue, i)
                break
            end
        end
        
        -- Slide out animation
        TweenService:Create(notification, TweenInfo.new(0.3), {Position = UDim2.new(1, 0, 0, notification.Position.Y.Offset)}):Play()
        
        -- Remove after animation
        game:GetService("Debris"):AddItem(notification, 0.3)
        
        -- Update positions of remaining notifications
        for i, notif in ipairs(notificationQueue) do
            TweenService:Create(notif, TweenInfo.new(0.3), {Position = UDim2.new(1, -320, 0, 20 + ((i - 1) * 90))}):Play()
        end
    end

    -- Auto-remove after duration
    game:GetService("Debris"):AddItem(notification, duration)
    spawn(function()
        wait(duration)
        removeNotification()
    end)

    -- Manual close
    closeButton.MouseButton1Click:Connect(removeNotification)

    -- Remove old notifications if too many
    if #notificationQueue > maxNotifications then
        local oldNotification = notificationQueue[1]
        table.remove(notificationQueue, 1)
        oldNotification:Destroy()
    end
end

-- Minimize/Restore functions
function AstroHub:MinimizeGUI()
    if not MainWindow or not MainFrame then return end
    
    if isMinimized then
        -- Restore
        MainFrame.Size = originalSize
        MainFrame.Position = originalPosition
        MainFrame.Visible = true
        
        if minimizeIcon then
            minimizeIcon:Destroy()
            minimizeIcon = nil
        end
        
        isMinimized = false
    else
        -- Minimize
        MainFrame.Visible = false
        
        -- Create minimize icon
        minimizeIcon = Instance.new("TextButton")
        minimizeIcon.Name = "MinimizeIcon"
        minimizeIcon.Size = UDim2.new(0, 50, 0, 50)
        minimizeIcon.Position = UDim2.new(0, 20, 0, 20)
        minimizeIcon.BackgroundColor3 = currentTheme.AccentColor
        minimizeIcon.Text = "A"
        minimizeIcon.TextColor3 = currentTheme.TextColor
        minimizeIcon.Font = Enum.Font.SourceSansBold
        minimizeIcon.TextSize = 20
        minimizeIcon.BorderSizePixel = 0
        minimizeIcon.Parent = MainWindow

        createUICorner(minimizeIcon, 25)

        minimizeIcon.MouseButton1Click:Connect(function()
            self:MinimizeGUI()
        end)
        
        isMinimized = true
    end
end

-- Destroy GUI
function AstroHub:DestroyGUI()
    if MainWindow then
        MainWindow:Destroy()
        MainWindow = nil
        MainFrame = nil
        TabContainer = nil
        TabContentContainer = nil
        Tabs = {}
        activeTab = nil
        isMinimized = false
        
        -- Clear notifications
        for _, notification in ipairs(notificationQueue) do
            notification:Destroy()
        end
        notificationQueue = {}
        
        -- Disconnect hotkey
        if hotkeyConnection then
            hotkeyConnection:Disconnect()
            hotkeyConnection = nil
        end
        
        -- Remove blur effect
        if blurEffect then
            blurEffect:Destroy()
            blurEffect = nil
        end
    end
end

-- Hotkey system
function AstroHub:SetHotkey(keyCode)
    if hotkeyConnection then
        hotkeyConnection:Disconnect()
    end
    
    currentHotkey = keyCode
    hotkeyConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        
        if input.KeyCode == keyCode then
            if MainWindow then
                MainWindow.Enabled = not MainWindow.Enabled
            end
        end
    end)
end

-- Blur effect
function AstroHub:SetBlurEffect(enabled)
    if enabled then
        if not blurEffect then
            blurEffect = Instance.new("BlurEffect")
            blurEffect.Size = 24
            blurEffect.Parent = game:GetService("Lighting")
        end
    else
        if blurEffect then
            blurEffect:Destroy()
            blurEffect = nil
        end
    end
end

-- Flag system
function AstroHub:SetFlag(flagName, value)
    flags[flagName] = value
end

function AstroHub:GetFlag(flagName)
    return flags[flagName]
end

-- Callback system
function AstroHub:RegisterCallback(eventName, callback)
    if not callbacks[eventName] then
        callbacks[eventName] = {}
    end
    table.insert(callbacks[eventName], callback)
end

function AstroHub:TriggerCallback(eventName, ...)
    if callbacks[eventName] then
        for _, callback in ipairs(callbacks[eventName]) do
            callback(...)
        end
    end
end

-- Set title
function AstroHub:SetTitle(newTitle)
    if MainFrame then
        local titleLabel = MainFrame:FindFirstChild("TitleBar"):FindFirstChild("TitleLabel")
        if titleLabel then
            titleLabel.Text = newTitle
        end
    end
end

-- Return the library
return AstroHub